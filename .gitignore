# History files
.Rhistory

# Example code in package build process
*-Ex.R

# R data files from past sessions
.Rdata

# RStudio files
.Rproj.user/
#############################
# Homework <HW 06> , Problem <04>
# < 12/08/2014 >
#############################
setwd('/Users/jf_song/Desktop/data mining/HW06')
library(tm)
library(SnowballC)
library(rpart)
library(rpart.plot)
library(lattice)
library(Matrix)
library(glmnet)
install.packages("e1071")
library(e1071)

#################
# Setup
#################
# Use code from hw05 
read.directory <- function(dirname) {
  infiles = list();
  filenames = dir(dirname,full.names=TRUE);
  for (i in 1:length(filenames)){
    infiles[[i]] = scan(filenames[i],what="",quiet=TRUE);
  }
  return(infiles)
}
hamilton.train = read.directory("fp_hamilton_train_clean")
hamilton.test = read.directory("fp_hamilton_test_clean")
madison.train = read.directory("fp_madison_train_clean")
madison.test = read.directory("fp_madison_test_clean")
make.sorted.dictionary.df <- function(infiles){
  dictionary.full <- unlist(infiles) 
  tabulate.dic <- tabulate(factor(dictionary.full)) 
  dictionary <- unique(dictionary.full) 
  dictionary <- sort(dictionary)
  dictionary.df <- data.frame(word = dictionary, count = tabulate.dic)
  sort.dictionary.df <- dictionary.df[order(dictionary.df$count,decreasing=TRUE),];
  return(sort.dictionary.df)
}
dictionary_names = c(hamilton.train, hamilton.test, madison.train, madison.test) #Create a dictionary
dictionary = make.sorted.dictionary.df(dictionary_names)
make.document.term.matrix <- function(infiles,dictionary){
  num.infiles <- length(infiles);
  num.words <- nrow(dictionary);
  dtm <- mat.or.vec(num.infiles,num.words); 
  for (i in 1:num.infiles){
    num.words.infile <- length(infiles[[i]]);
    infile.temp <- infiles[[i]];
    for (j in 1:num.words.infile){
      ind <- which(dictionary == infile.temp[j])[[1]];      
      dtm[i,ind] <- dtm[i,ind] + 1;
    }
  }
  return(dtm);
}
# Create document term matrix
dtm.hamilton.train = make.document.term.matrix(hamilton.train, dictionary)
dtm.hamilton.test = make.document.term.matrix(hamilton.test, dictionary)
dtm.madison.train = make.document.term.matrix(madison.train, dictionary)
dtm.madison.test = make.document.term.matrix(madison.test, dictionary)

#Create data frames, methods as the solution for hw05
# make training and test sets y=0 if Madison; =1 if Hamilton & var names being dictionary words
dat.train <- as.data.frame(rbind(dtm.hamilton.train, dtm.madison.train))
dat.test <- as.data.frame(rbind(dtm.hamilton.test, dtm.madison.test))
names(dat.train) <- names(dat.test) <- as.vector(dictionary$word)
dat.train$y <- as.factor(c(rep(1, nrow(dtm.hamilton.train)), rep(0, nrow(dtm.madison.train))))
dat.test$y <- as.factor(c(rep(1, nrow(dtm.hamilton.test)), rep(0, nrow(dtm.madison.test))))

# center and scale the data
mean.train <- apply(dat.train[,-4876], 2, mean)  	# col means of training x
sd.train <- apply(dat.train[,-4876], 2, sd)			# col sd of training x
x.train <- scale(dat.train[,-4876])					# standardize training x
x.train[,sd.train==0] <- 0							# let the var be 0 if its sd=0
x.test <- scale(dat.test[,-4876], center = mean.train, scale=sd.train)		# use training x mean & sd to standardize test x
x.test[,sd.train==0] <- 0							# let the var be 0 if its sd=0
y.train <-dat.train$y
y.test <- dat.test$y

#################
# Problem 4a
#################
#fit svm model
svm.fit.4a = svm(x.train[,1:100], y.train, kernel='linear')
predict.out.4a = predict(svm.fit.4a, x.test[,1:100])
#the correct classification rate
correct.4a = 1- sum(abs(as.numeric(predict.out.4a)-as.numeric(y.test)))/nrow(x.test)
correct.4a

#################
# Problem 4b
#################
num.words = seq(from=5,to=100,by=5)
correct.4b = mat.or.vec(1,length(num.words))
for(i in 1:length(num.words)){
  svm.fit.4b = svm(x.train[, 1:num.words[i]], y.train, kernel='linear')
  predict.out.4b = predict(svm.fit.4b, x.test[,1:num.words[i]])
  #correct classification rate
  correct.4b[i] = 1-sum(abs(as.numeric(predict.out.4b)-as.numeric(y.test)))/nrow(x.test)
}
#plot and save
plot(t(correct.4b), type ="b", xlab="Number of Words", ylab="Correct Classfication Rate", xaxt='n')
axis(side=1, at=1:length(num.words), labels=as.character(num.words))
title('hw06_04b: The Correct Classification Rate with different word number')
filename = 'hw06_04b.png'
dev.copy(device=png, file=filename,height=300, width=800)
dev.off()

#################
# Problem 4c
#################
num.words = seq(from=5,to=100,by=5)
correct.4c = mat.or.vec(1,length(num.words))
for(i in 1:length(num.words)){
  svm.fit.4c = svm(x.train[,1:num.words[i]],y.train,kernel='radial')
  predict.out.4c = predict(svm.fit.4c,x.test[,1:num.words[i]])
  #Determine the correct classification rate
  correct.4c[i] = 1-sum(abs(as.numeric(predict.out.4c)-as.numeric(y.test)))/nrow(x.test)
}
#plot and save
plot(t(correct.4c),type ="b", xlab="Number of Words", ylab="Correct Classfication Rate", xaxt='n')
axis(side=1, at=1:length(num.words), labels=as.character(num.words))
title('hw06_04c: The Correct Classification Rate with different word number')
filename = 'hw06_04c.png'
dev.copy(device=png, file=filename,height=300, width=800)
dev.off()

#################
# Problem 4d
#################
x.train.selected = x.train[,c("upon","depart")]
traindata.selected = data.frame(x.train.selected, y.train)
svm.fit.4d = svm(y.train~.,data=traindata.selected)
#plot and save
plot(svm.fit.4d,trainingdata)
filename = 'hw06_04d.png'
dev.copy(device=png, file=filename,height=600, width=800)
dev.off()

